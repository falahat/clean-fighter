/**
 * @attributes
 * 'type' The type of the character
 * 'id' The variation of this instance
 * 'fileName' The fileName to look for the image.
 * 'fileDirectory' The directory to look under for the image.
 * 'movementx' Arbitrary Haxe Code to evaluate for movement, x
 * 'movementy' Arbitrary Haxe Code to evaluate for movement, y
 * 'speedx' Speed multiplier, x movement
 * 'speedy' Speed multiplier, y movement
 */

/** Class that represents a Character in the game.*/
class Character extends Entity implements ICustomEntity
{
    //Stuff that will be used with XmlLoader
    public var _attribute:Map<String, Dynamic>; //Map that stores the attributes stored within a given variation in the XML, see @attributes at the top.
    public var _assetManager:AssetManager;
    public var _imageContainer:Sprite; //the Sprite class is technically just a container that holds an image to be displayed
    public var _characterImage:Bitmap; //the image to be "contained" within _imageContainer
    public var _characterImageData:BitmapData; //info about the image in _characterImage (ie. dimensions, its current location, etc.)

    //The (x,y) coordinates of our Character
    public var _xCoordinate:Null<Int>;
    public var _yCoordinate:Null<Int>;

    //Whether we are able to drag this character or not
    //Set to true if we can drag this character, set to false otherwise
    public var _draggable:Bool;

    //Calculation of the x and y components
    //of the distance between the current mouse position and the top-left corner of our image
    //These will be used in when we do dragging
    //The reason why we care about the distance between the mouse position and the top-left corner of the image
    //is because when we do dragging, the distance between the mouse position and top-left corner of the image
    //should remain the same throughout the drag
    public var _distanceFromTopLeftCornerOfImageX:Null<Float>;
    public var _distanceFromTopLeftCornerOfImageY:Null<Float>;

    //Set to true when our image is being dragged and set to false when our image is not being dragged
    public var _isBeingDragged:Bool;

    //The scene that this Character is currently in
    public var _scene:Scene;

    //A higher layer appears in front
    public var _layer:Null<Int>;


    //The next layer to ensure that the next object will always be put in front.
    //public var _nextLayer:Null<Int>; TODO: Put into globals since children can't inherit static

    //The damage on the stack
    public var _unresolvedDamage:Int;
    
    //The current weapon that this Character is using
    //Points to a template instance of a projectile inside the AssetManager
    public var _currentWeapon:Projectile;
  
    /**
     * Initializes a Character, which is essentially a sprite, but I can't call name it Sprite because Sprite is already a built-in class
     * Parameters with the question mark in front means it is optional
     * NOTE: For the fileDirectory and fileName, these should be for the XML file, not the image!
     * The image directory and name info should be included in the XML file
     * @param   p_kernel    The kernel of game (usually, passed in as _kernel)
     * @param   assetManager    The AssetManager (usually, passed in as _assetManager)
     * @param   ?xCoordinate    The x coordinate for the image to start out at
     * @param   ?yCoordinate    The y coordinate for the image to start out at
     */
    public function new( p_kernel:IKernel, assetManager:AssetManager, ?xCoordinate:Int, ?yCoordinate:Int )
    {
    }

    /**
     * More initialization
     */
    override private function _init():Void
    {
    }
    
    /** Calls xmlLoader and creates a template for every variation inside the file and stores it in the AssetManager */
    public function preloader(xmlName:String, xmlDirectory:String):Void
    {

    }

    /**
     * Adds this Character to a Scene that we pass in
     * If you decide not to pass in a layer value, it will by default make this Character in front of everything
     * @param   scene   The specific Scene that we want to add this Character to
     * @param   ?layer  The frontness value that you want to set
     */
    public function addCharacterToScene(scene:Scene, ?layer:Int):Void
    {
    }

    /** Returns a list of Characters that are currently colliding with other characters.*/
    public function checkCollision():List<Character>
    {

    }


    /** Moves this Character based on movement code in currently loaded attributes if present; otherwise, uses a default */
    public function move(p_deltaTime:Int = 0):Void
    {
    }
    
    /** Puts DAMAGEAMOUNT onto stack, amount varies based on the multiplier/additive values in AssetManager for SOURCE */
    public function addDamage(damageAmount:Float, source:Character):Void
    {

    }

    /** Resolves damage on the stack */
    public function updateHealth():Void {

    }

    /** Checks if this object should fire, and if so, does. */
    public function shouldFire():Void {
    }

    /**
     * Creates a new Character with the same _characterImageData and XML file as this one
     */
    public function getCopy(?attribute:Map<String, Dynamic>):ICustomEntity
    {
    }

    /** Attempts to convert the value associated with KEY in _attribute to a Float if it exists. */
    private function attributeToFloat(key:String):Void
    {
    }

    /** Attempts to convert the value associated with KEY in _attribute to a Int if it exists. */
    private function attributeToInt(key:String):Void
    {
    }

    //TODO: Figure out what String representation of Bool is, to reverse convert back.
    private function attributeToBool(key:String):Void
    {
    }

    /** Returns a copy of _attribute with all values converted to a new String. */
    private function getStringAttributeMap():Map<String, Dynamic>
    {
    }

    /**
     * Updates the properties of our character (ie. position, whether it's being dragged, etc.) while our game is still open
     */
    override private function _updater( p_deltaTime:Int = 0 ):Void
    {
    }

    /**
     * Disposes (removes) our Character
     * Currently, this has not been tested yet
     */
    override private function _disposer():Void
    }

    /**
     * Calls the private _disposer() method (which I don't think I can make public because it overrides a private method)
     */
    public function disposeCharacter():Void
    {
    }

}