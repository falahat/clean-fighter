
/**
 * ...
 * @author Kevin
 */

/** Class that represents a Character in the game.*/
class Character extends Entity implements ICustomEntity
{
	//Stuff that will be used with XmlLoader
	public var _attribute:Map<String, Dynamic>; //Map that stores the attributes stored within a given variation in the XML
	public var _type:String; //the type specified in the type tag in the XML file
	public var _variationId:String; //the String contained within the id tag in one of the variations in the XML file
	public var _loadedXmlInfo:Map < String, Map < String, Map < String, Dynamic > > >;

	public var _assetManager:AssetManager;
	public var _fileDirectory:Null<String>; //file directory as specified in the XML file
	public var _fileName:Null<String>; //file name as specified in the XML file

	public var _imageContainer:Sprite; //the Sprite class is technically just a container that holds an image to be displayed
	public var _characterImage:Bitmap; //the image to be "contained" within _imageContainer
	public var _characterImageData:BitmapData; //info about the image in _characterImage (ie. dimensions, its current location, etc.)

	//The (x,y) coordinates of our Character
	public var _xCoordinate:Null<Int>;
	public var _yCoordinate:Null<Int>;

	//The x and y components of this Character's speed (how much we add/subtract to the character's position on each update)
	public var _speedX:Int;
	public var _speedY:Int;

	//Whether we are able to drag this character or not
	//Set to true if we can drag this character, set to false otherwise
	public var _draggable:Bool;

	//Calculation of the x and y components
	//of the distance between the current mouse position and the top-left corner of our image
	//These will be used in when we do dragging
	//The reason why we care about the distance between the mouse position and the top-left corner of the image
	//is because when we do dragging, the distance between the mouse position and top-left corner of the image
	//should remain the same throughout the drag
	public var _distanceFromTopLeftCornerOfImageX:Null<Float>;
	public var _distanceFromTopLeftCornerOfImageY:Null<Float>;

	//Set to true when our image is being dragged and set to false when our image is not being dragged
	public var _isBeingDragged:Bool;

	//The scene that this Character is currently in
	public var _scene:Scene;

	//A Map of all Characters that have been initialized (including this Character)
	//This Map is organized by the Character _type and _variationId
	//This is good for when you only want to pick out Characters that have a certain _type and/or _variationId
	public static var _allCharacters:Map<String, Map<String, MapList<Character>>>;

	//The index of this Character in its corresponding MapList in _allCharacters
	public var _index:Int;

	//A list of all Characters that have been initialized (including this Character)
	//This is good for when you have to iterate through ALL Characters to do something,
	//like when during the checkCollision() method
	public static var _unorganizedCharacterList:List<Character>;

	//This tells you "how much in front" this Character is
	//The higher the value of this frontness, the more in front this Character will be
	//For example, a Character with a frontness of 5 will be more in front than Characters with frontnesses 1 or 2
	//If you're still confused, think of it this way: If Character A stands in front of Character B,
	//then Character A will have a greater frontness value than Character B
	//The smallest frontness possible is 1 (a frontness of 1 means that the Character will show up most behind, as in behind EVERYTHING)
	public var _frontness:Null<Int>;

	//The default value for _frontness that this Character will have when it is added
	//The default value will increase every time a Character is added
	//So by default, every new Character you add appear in front of the other Characters you previously added
	public static var _defaultFrontness:Null<Int>;

	/**
	 * Initializes a Character, which is essentially a sprite, but I can't call name it Sprite because Sprite is already a built-in class
	 * Parameters with the question mark in front means it is optional
	 * NOTE: For the fileDirectory and fileName, these should be for the XML file, not the image!
	 * The image directory and name info should be included in the XML file
	 * @param	p_kernel	The kernel of game (usually, passed in as _kernel)
	 * @param	assetManager	The AssetManager (usually, passed in as _assetManager)
	 * @param	?fileDirectory	The file directory of the XML file
	 * @param	?fileName	The file name of the XML file
	 * @param	?xCoordinate	The x coordinate for the image to start out at
	 * @param	?yCoordinate	The y coordinate for the image to start out at
	 */
	public function new( p_kernel:IKernel, assetManager:AssetManager, ?fileDirectory:String, ?fileName:String, ?xCoordinate:Int, ?yCoordinate:Int )
	{
	}

	/**
	 * More initialization
	 */
	override private function _init():Void
	{
	}

	/**
	 * Adds this Character to a Scene that we pass in
	 * If you decide not to pass in a frontness value, it will by default make this Character in front of everything
	 * @param	scene	The specific Scene that we want to add this Character to
	 * @param	?frontness	The frontness value that you want to set
	 */
	public function addCharacterToScene(scene:Scene, ?frontness:Int):Void
	{
	}

	/** Returns a list of Characters that are currently colliding with other characters.*/
	public function checkCollision():List<Character>
	{
	}

	/**
	 * Sets a specific speed for this Character
	 * Default values are 0 for speedX and speedY
	 * If you don't pass in any arguments, this will set the speed to 0 for both directions, stopping our Character movement
	 * @param	speedX	The x-component of the speed
	 * @param	speedY	The y-component of the speed
	 */
	public function setSpeed(speedX:Int = 0, speedY:Int = 0):Void
	{
	}

	/**
	 * Creates a new Character with the same _characterImageData and XML file as this one
	 */
	public function getCopy(?attribute:Map<String, Dynamic>):ICustomEntity
	{
	}

	/** Attempts to convert the value associated with KEY in _attribute to a Float if it exists. */
	private function attributeToFloat(key:String):Void
	{
	}

	/** Attempts to convert the value associated with KEY in _attribute to a Int if it exists. */
	private function attributeToInt(key:String):Void
	{
	}

    //TODO: Figure out what String representation of Bool is, to reverse convert back.
	private function attributeToBool(key:String):Void
	{
	}

	/** Returns a copy of _attribute with all values converted to a new String. */
	private function getStringAttributeMap():Map<String, Dynamic>
	{
	}

	/**
	 * Updates the properties of our character (ie. position, whether it's being dragged, etc.) while our game is still open
	 */
	override private function _updater( p_deltaTime:Int = 0 ):Void
	{
	}

	/**
	 * Disposes (removes) our Character
	 * Currently, this has not been tested yet
	 */
	override private function _disposer():Void
	}

	/**
	 * Calls the private _disposer() method (which I don't think I can make public because it overrides a private method)
	 */
	public function disposeCharacter():Void
	{
	}

}