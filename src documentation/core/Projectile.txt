
/** Class that represents a projectile fired by the character, that will have projectile characteristics. These characterstics include damage, affect-types, movement speeds, coordinates, a name, a unique ID, and many more.*/
class Projectile extends Character {

    /** Creates a new projectile (finish after you decide what the method will do).*/
	public function new (p_kernel:IKernel, assetManager:AssetManager,
						 ?fileDirectory:String, ?fileName:String,
						 ?xCoordinate:Int, ?yCoordinate:Int) {
		// TODO: coordinate in float? or int?
		// TODO: what if the optional param is not provided
		// TODO: how super works?
		// instance variable defaults to be initialized?
	}

    /** Returns a list of characters that are currently colliding with this projectile.*/
	override public function checkCollision(): List<Character> {
	}

    /** Returns a copy of this projectile with the same attributes, without reloading the data from the XML.*/
	override public function getCopy(?attribute:Map<String, Dynamic>):ICustomEntity {
	}

    /** Updates the object based on P_DELTATIME, more specifically it changes its position according to the current velocity.*/
	override private function _updater (p_deltaTime:Int = 0):Void {
		// calculate the pseudo-speed of this projectile
		var func_x: String, func_y: String;
		var pos_x: Int, pos_y: Int;
		// func_x = new String(_xMovement);
		// func_y = new String(_yMovement);
		func_x = _attribute.get("xMovement");
		func_y = _attribute.get("yMovement");
        func_x.split("$1").join(String(p_deltaTime));
        func_y.split("$1").join(String(p_deltaTime));
        // TODO: how to make parse works
        pos_x = cast(Context.parse(func_x, Context.currentPos(), Int);
        pos_y = cast(Context.parse(func_y, Context.currentPos(), Int);
        setSpeed(pos_x - _xCoordinate, pos_y - _yCoordinate);

        // use the super method to complete the update
        super._updater(p_deltaTime);
	}

    /** Function that applies damage to certain objects?*/
	// TODO: where is the resolveDamage function in Character?
	override public function resolveDamage(damage: Int): Void {
		throw "resolveDamage should not be called on a Projectile instance";
	}

    /** Function that defines what happens when two objects collide.*/
	// TODO: where is the onCollide function in Character?
	override private function onCollide(collisions: List<Character>): Void {
		for (hitObject in collisions.elements()) {
			// contains method for List?
			if (_attribute.get("affects").contains(hitObject._type)) {
				var damage: Int = _attribute.get("damage");
                // damage *= multipliers.get('damage').get(this.type);
                // damage *= multipliers.get('damage').get('global');
                // damage += additive.get('damage').get(this.type);
                hitObject.resolveDamage(damage);
			}
		}
	}

}
